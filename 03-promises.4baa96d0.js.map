{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAIA,MAAMC,EAAWC,SAASC,cAAc,SAExC,IACIC,EADAC,EAAU,EA4Bd,SAASC,EAAeC,EAAYC,GAClCH,IAaF,SAAuBI,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EACFI,EAAQ,C,SAAEN,E,MAAUC,IAEpBM,EAAO,C,SAAEP,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CApBXQ,CAAcb,EAASc,OAAOZ,IAC3Ba,MAAK,EAACX,SAAEA,EAAQC,MAAEA,MACjBA,GAASF,GAAaC,EAAW,GACjCY,EAAAtB,GAASuB,OAAOC,QAAQ,qBAAqBd,QAAeC,MAAU,IAEvEc,OAAM,EAACf,SAAEA,EAAQC,MAAEA,MAClBA,GAASF,GAAaC,EAAW,GACjCY,EAAAtB,GAASuB,OAAOG,QAAQ,oBAAoBhB,QAAeC,MAAU,G,CAnC3ET,EAASyB,iBAAiB,UAAUC,IAClCA,EAAMC,iBAEFxB,GACFyB,cAAczB,GAGhB,MAAMG,EAAaN,EAASS,MAAMoB,MAC5BtB,EAAYP,EAAS8B,KAAKD,MAC1BE,EAAc/B,EAASgC,OAAOH,MAEpCxB,EAAeC,EAAYC,GAE3BJ,EAAa8B,aAAY,KACvB,GAAI7B,GAAWc,OAAOa,GAGpB,OAFAH,cAAczB,QACdC,EAAU,GAIZC,EAAeC,EAAYC,EAAU,GAEpCA,EAAU","sources":["src/js/03-promises.js"],"sourcesContent":["'use strict';\n\nimport Notiflix from 'notiflix';\n\nconst formElem = document.querySelector('.form');\n\nlet counter = 0;\nlet intervalId;\n\nformElem.addEventListener('submit', event => {\n  event.preventDefault();\n\n  if (intervalId) {\n    clearInterval(intervalId);\n  }\n\n  const delayValue = formElem.delay.value;\n  const stepValue = formElem.step.value;\n  const amountValue = formElem.amount.value;\n\n  promiseHandler(delayValue, stepValue);\n\n  intervalId = setInterval(() => {\n    if (counter >= Number(amountValue)) {\n      clearInterval(intervalId);\n      counter = 0;\n      return;\n    }\n\n    promiseHandler(delayValue, stepValue);\n\n  }, stepValue);\n});\n\nfunction promiseHandler(delayValue, stepValue) {\n  counter++;\n\n  createPromise(counter, Number(delayValue))\n    .then(({ position, delay }) => {\n      delay += stepValue * (position - 1);\n      Notiflix.Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n    })\n    .catch(({ position, delay }) => {\n      delay += stepValue * (position - 1);\n      Notiflix.Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n    });\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$formElem","document","querySelector","$47d4ff9957288465$var$intervalId","$47d4ff9957288465$var$counter","$47d4ff9957288465$var$promiseHandler","delayValue","stepValue","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","$47d4ff9957288465$var$createPromise","Number","then","$parcel$interopDefault","Notify","success","catch","failure","addEventListener","event","preventDefault","clearInterval","value","step","amountValue","amount","setInterval"],"version":3,"file":"03-promises.4baa96d0.js.map"}