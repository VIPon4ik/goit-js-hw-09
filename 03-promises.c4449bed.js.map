{"mappings":"iiBAAA,IAOIA,EAPJC,EAAAC,EAAA,SAIMC,EAAWC,SAASC,cAAc,SAEpCC,EAAU,EA4Bd,SAASC,EAAeC,EAAYC,GAcpC,IAAuBC,EAAUC,EACzBC,EAdNN,KAaqBI,EAXPJ,EAWiBK,EAXRE,OAAOL,GAYxBI,EAAgBE,KAAKC,SAAW,GAC/B,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLP,EACFK,EAAQ,CAAEP,WAAUC,UAEpBO,EAAO,CAAER,WAAUC,S,GAEpBA,E,KAnBFS,MAAK,SAAAC,G,IAAGX,EAAQW,EAARX,SAAUC,EAAKU,EAALV,MACjBA,GAASF,GAAaC,EAAW,GACjCY,EAAArB,GAASsB,OAAOC,QAAQ,qBAAoCC,OAAff,EAAS,QAAYe,OAANd,EAAM,M,IAEnEe,OAAM,SAAAL,G,IAAGX,EAAQW,EAARX,SAAUC,EAAKU,EAALV,MAClBA,GAASF,GAAaC,EAAW,GACjCY,EAAArB,GAASsB,OAAOI,QAAQ,oBAAmCF,OAAff,EAAS,QAAYe,OAANd,EAAM,M,IAnCvER,EAASyB,iBAAiB,UAAU,SAAAC,GAClCA,EAAMC,iBAEF9B,GACF+B,cAAc/B,GAGhB,IAAMQ,EAAaL,EAASQ,MAAMqB,MAC5BvB,EAAYN,EAAS8B,KAAKD,MAC1BE,EAAc/B,EAASgC,OAAOH,MAEpCzB,EAAeC,EAAYC,GAE3BT,EAAaoC,aAAY,WACvB,GAAI9B,GAAWO,OAAOqB,GAGpB,OAFAH,cAAc/B,QACdM,EAAU,GAIZC,EAAeC,EAAYC,E,GAE1BA,E","sources":["src/js/03-promises.js"],"sourcesContent":["'use strict';\n\nimport Notiflix from 'notiflix';\n\nconst formElem = document.querySelector('.form');\n\nlet counter = 0;\nlet intervalId;\n\nformElem.addEventListener('submit', event => {\n  event.preventDefault();\n\n  if (intervalId) {\n    clearInterval(intervalId);\n  }\n\n  const delayValue = formElem.delay.value;\n  const stepValue = formElem.step.value;\n  const amountValue = formElem.amount.value;\n\n  promiseHandler(delayValue, stepValue);\n\n  intervalId = setInterval(() => {\n    if (counter >= Number(amountValue)) {\n      clearInterval(intervalId);\n      counter = 0;\n      return;\n    }\n\n    promiseHandler(delayValue, stepValue);\n\n  }, stepValue);\n});\n\nfunction promiseHandler(delayValue, stepValue) {\n  counter++;\n\n  createPromise(counter, Number(delayValue))\n    .then(({ position, delay }) => {\n      delay += stepValue * (position - 1);\n      Notiflix.Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n    })\n    .catch(({ position, delay }) => {\n      delay += stepValue * (position - 1);\n      Notiflix.Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n    });\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$ce04d3a99e08e73b$var$intervalId","$6JpON","parcelRequire","$ce04d3a99e08e73b$var$formElem","document","querySelector","$ce04d3a99e08e73b$var$counter","$ce04d3a99e08e73b$var$promiseHandler","delayValue","stepValue","position","delay","shouldResolve","Number","Math","random","Promise","resolve","reject","setTimeout","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure","addEventListener","event","preventDefault","clearInterval","value","step","amountValue","amount","setInterval"],"version":3,"file":"03-promises.c4449bed.js.map"}